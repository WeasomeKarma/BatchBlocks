// BATCH BLOCKS COMPILER //
// CREATED BY :          //
// DARIUS GRAUSLYS       //

#include <unordered_map>
#include <iostream>
#include <string>
#include <sstream>
#include <windows.h>
#include <fstream>

using namespace std;

ifstream in_stream;
ofstream out_stream;

unordered_map<string, string> varibles;
unordered_map<string, string> dir;
string basedir="C:\\";
string script[1000];
string cmd="";
string lcom="";
int argNum=-1;
string args[1000][2];
stringstream convert;
int out=0;

int library() {
	string varVal="";
	string varVal2="";
	string blockArgs[100];
	string blockArgsCnstr="";
	int blockArgsCnstrNum=0;
	int repeat=0;
	string previousVal="";
	if (cmd == "cc") {
		for (int x=0;x<1000;x++) {
			if (args[x][0] != "~~~") {
				cout << args[x][0] << endl;
			}
			if (args[x][0]=="|>") {
				cout << "|> Constructed." << endl;
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-|>Construction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 0) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else if (blockArgs[y]=="-^") {
							varVal=previousVal;
							cout << "      -perviousVal = " << previousVal << endl;
							cout << "        |_val = " << varVal << endl;
						}
						else if (blockArgs[y]=="-#=>") {
							y++;
							varVal+="%arrayOUT%";
							y++;
						}
						else if (blockArgs[y]=="-as") {
							cout << "    |_ Val : (" << blockArgs[y+1] << ")" << endl;
							cout << "    |_ Piped Val : (" + varVal + ")" << endl;
							out_stream << "set pipe" << blockArgs[y+1] << "=" << varVal << endl;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
			}
			if (args[x][0]=="-#") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				out_stream.close();
				out_stream.open("dcc_" + blockArgs[0] + "ArrayINIT.bat");
				convert << blockArgs[1];
				convert >> out;
				for (int u=0;u<out;u++)
				{
					out_stream << "set " << u << blockArgs[0] << "Array=0" << endl;
				}
				out_stream.close();
				out_stream.open("dcc_" + blockArgs[0] + "ArraySET.bat");
				for (int u=0;u<out;u++)
				{
					out_stream << "if %arraySET%==" << u << " set " << u << blockArgs[u] << "Array=%arraySETTO%" << endl;
				}
				out_stream.close();
				out_stream.open("dcc_" + blockArgs[0] + "ArrayGET.bat");
				for (int u=0;u<out;u++)
				{
					out_stream << "if %arrayGET%==" << u << " set arrayOUT=%" << u << blockArgs[0] << "Array%" << endl;
				}
				out_stream.close();
				out_stream.open("CompiledMain.bat", ios::app);
			}
			if (args[x][0]=="-@<") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				cout << "-@< Constructed." << endl;
				dir[blockArgs[0]] = blockArgs[1];
				cout << "    |_ ToDir : (" << args[x][1] << ")" << endl;
				cout << "       |_ Label : (" << args[x][0] << ")" << endl;
			}
			if (args[x][0]=="-@>") {
				cout << "-@> Constructed." << endl;
				cout << "    |_ ToDir : (" << dir[args[x][1]] << ")" << endl;
				out_stream << "cd " << dir[args[x][1]] << endl;
			}
			if (args[x][0]=="-<@") {
				cout << "-<@ Constructed." << endl;
				cout << "    |_ ToDir : (" << dir[args[x][1]]<< ")" << endl;
				out_stream << "cd %homeDir%" << endl;
			}
			if (args[x][0].at(0)=='-' && args[x][0].at(1)=='v' && args[x][0].at(2)=='.') {
				string createType="";
				string varName="";
				varVal="";
				string mthCnstr="";
				string mthData[100];
				int varParse=4;
				int mthCnstrCnt=0;
				while (args[x][0].at(varParse) !=']') {
					varName+=args[x][0].at(varParse);
					varParse++;
				}
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						mthData[mthCnstrCnt]=mthCnstr;
						mthCnstrCnt++;
						mthCnstr="";
					}
					else
					{
						mthCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<mthCnstrCnt;y++){
					cout << "-varibleConstruction ::argNum = " << y << " ::argTotalNum" << mthCnstrCnt << endl;
					cout << "                     |_ " << mthData[y] << endl;
					if (mthData[y].at(0)=='<' && mthData[y].at(1)=='|') {
						string pipeGet="";
						for(int pipeRead=2;pipeRead<mthData[y].length();pipeRead++) {
							if (pipeRead < mthData[y].length()) {
								pipeGet+=mthData[y].at(pipeRead);
							}
						}
						varVal+="%pipe" + pipeGet + "%";
					}
					else if (mthData[y]=="-v") {
						y++;
						varVal+=varibles[mthData[y]];
						y++;
					}
					else if (mthData[y]=="++") {
						varVal+="%" + varName + "%+1";
					}
					else if (mthData[y]=="--") {
						varVal+="%" + varName + "%-1";
					}
					else if (mthData[y]=="in") {
						varVal="";
						createType="/p";
					}
					else {
						varVal+=mthData[y];
					}
					if (y < mthCnstrCnt) {
						if (y != mthCnstrCnt-1) {
							cout << "       ValueConstructor = " << y << endl;
							if (createType != "/p") {
								varVal+="+";
							}
						}
					}
				}
				varibles[varName] = varVal;
				cout << "v. " << varName << " Constructed." << endl;
				cout << "    |_ Val : (" +args[x][1]+ ")" << endl;
				for (int varValTrans=0;varValTrans < varName.length();varValTrans++) {
					if (varName.at(varValTrans) == '.') {
						varVal2+=' ';
					} else {
						varVal2+=varName.at(varValTrans);
					}
				}
				cout << "        |_ Generated form : set " << varVal2 << "=" << varVal << endl;
				out_stream << "set " << varVal2 << "=" << varVal << endl;
				previousVal="%" + varName + "%";
			}
			if (args[x][0]=="-dcc") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-dccConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
				cout << "-dcc Constructed." << endl;
				cout << "    |_ Val : (" +varVal+ ")" << endl;
				out_stream << "call dcc_" << varVal << ".bat" << endl;
				previousVal=varVal;
			}
			if (args[x][0]=="-c") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-cConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
				cout << "-c Constructed." << endl;
				cout << "    |_ Val : (" +varVal+ ")" << endl;
				out_stream << "Echo " << varVal << endl;
				previousVal=varVal;
			}
			if (args[x][0]=="-pas") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-pasConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
				cout << "-pas Constructed." << endl;
				cout << "    |_ Val : (" +varVal+ ")" << endl;
				out_stream << "set /p pause=" << varVal << endl;
				previousVal=varVal;
			}
			if (args[x][0]=="-^^") {
				cout << "-^^ Constructed." << endl;
				cout << "    |_ Val : (" +args[x][1]+ ")" << endl;
				out_stream << ":repeat" << repeat << endl;
				previousVal=args[x][1];
			}
			if (args[x][0]=="-^^^") {
				cout << "-^^^ Constructed." << endl;
				cout << "    |_ Val : (" +args[x][1]+ ")" << endl;
				out_stream << "goto repeat" << repeat << endl;
				previousVal=args[x][1];
			}
			if (args[x][0]=="-bat") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-batConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
				cout << "-bat Constructed." << endl;
				cout << "    |_ Val : (" +varVal+ ")" << endl;
				out_stream << varVal <<  endl;
				previousVal=varVal;
			}
		} 
	}
	else if (cmd == "dcc") {
		string dccName="";
		for (int x=0;x<1000;x++) {
			if (args[x][0] != "~~~") {
				cout << args[x][0] << endl;
			}
			if (args[x][0]=="-s") {
				dccName="dcc_" + args[x][1] + ".bat";
				out_stream.close();
				out_stream.open(dccName);
			}
			if (args[x][0]=="|>") {
				cout << "|> Constructed." << endl;
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-cConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else if (blockArgs[y]=="^") {
							varVal=previousVal;
						}
						else if (blockArgs[y]=="-#=>") {
							y++;
							varVal+="%arrayOUT%";
							y++;
						}
						else if (blockArgs[y]=="-as") {
							cout << "    |_ Val : (" << blockArgs[y+1] << ")" << endl;
							cout << "    |_ Piped Val : (" +varVal+ ")" << endl;
							out_stream << "set pipe" << blockArgs[y+1] << "=" << varVal << endl;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
			}
			if (args[x][0]=="-#") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				out_stream.close();
				out_stream.open("dcc_" + blockArgs[0] + "ArrayINIT.bat");
				convert << blockArgs[1];
				convert >> out;
				for (int u=0;u<out;u++)
				{
					out_stream << "set " << blockArgs[0] << "Array=0" << endl;
				}
				out_stream.close();
				out_stream.open("dcc_" + blockArgs[0] + "ArraySET.bat");
				for (int u=0;u<out;u++)
				{
					out_stream << "if %arraySET%==" << u << " set " << blockArgs[u] << "Array=%arraySETTO%" << endl;
				}
				out_stream.close();
				out_stream.open("dcc_" + blockArgs[0] + "ArrayGET.bat");
				for (int u=0;u<out;u++)
				{
					out_stream << "if %arrayGET%==" << u << " set arrayOUT=%" << blockArgs[0] << "Array%" << endl;
				}
				out_stream.close();
				out_stream.open("CompiledMain.bat", ios::app);
			}
			if (args[x][0]=="-@<") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				cout << "-@< Constructed." << endl;
				dir[blockArgs[0]] = blockArgs[1];
				cout << "    |_ ToDir : (" << args[x][1] << ")" << endl;
				cout << "       |_ Label : (" << args[x][0] << ")" << endl;
			}
			if (args[x][0]=="-@>") {
				cout << "-@> Constructed." << endl;
				cout << "    |_ ToDir : (" << dir[args[x][1]] << ")" << endl;
				out_stream << "cd " << dir[args[x][1]] << endl;
			}
			if (args[x][0]=="-<@") {
				cout << "-<@ Constructed." << endl;
				cout << "    |_ ToDir : (" << dir[args[x][1]]<< ")" << endl;
				out_stream << "cd %homeDir%" << endl;
			}
			if (args[x][0].at(0)=='-' && args[x][0].at(1)=='v' && args[x][0].at(2)=='.') {
				string createType="";
				string varName="";
				varVal="";
				string mthCnstr="";
				string mthData[100];
				int varParse=4;
				int mthCnstrCnt=0;
				while (args[x][0].at(varParse) !=']') {
					varName+=args[x][0].at(varParse);
					varParse++;
				}
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						mthData[mthCnstrCnt]=mthCnstr;
						mthCnstrCnt++;
						mthCnstr="";
					}
					else
					{
						mthCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<mthCnstrCnt;y++){
					cout << "-varibleConstruction ::argNum = " << y << " ::argTotalNum" << mthCnstrCnt << endl;
					cout << "                     |_ " << mthData[y] << endl;
					if (mthData[y].at(0)=='<' && mthData[y].at(1)=='|') {
						string pipeGet="";
						for(int pipeRead=2;pipeRead<mthData[y].length();pipeRead++) {
							if (pipeRead < mthData[y].length()) {
								pipeGet+=mthData[y].at(pipeRead);
							}
						}
						varVal+="%pipe" + pipeGet + "%";
					}
					else if (mthData[y]=="-v") {
						y++;
						varVal+=varibles[mthData[y]];
						y++;
					}
					else if (mthData[y]=="++") {
						varVal+="%" + varName + "%+1";
					}
					else if (mthData[y]=="--") {
						varVal+="%" + varName + "%-1";
					}
					else if (mthData[y]=="in") {
						varVal="";
						createType="/p";
					}
					else {
						varVal+=mthData[y];
					}
					if (y < mthCnstrCnt) {
						if (y != mthCnstrCnt-1) {
							cout << "       ValueConstructor = " << y << endl;
							if (createType != "/p") {
								varVal+="+";
							}
						}
					}
				}
				varibles[varName] = varVal;
				cout << "v. " << varName << " Constructed." << endl;
				cout << "    |_ Val : (" +args[x][1]+ ")" << endl;
				for (int varValTrans=0;varValTrans < varName.length();varValTrans++) {
					if (varName.at(varValTrans) == '.') {
						varVal2+=' ';
					} else {
						varVal2+=varName.at(varValTrans);
					}
				}
				cout << "        |_ Generated form : set " << varVal2 << "=" << varVal << endl;
				out_stream << "set " << varVal2 << "=" << varVal << endl;
				previousVal="%" + varName + "%";
			}
			if (args[x][0]=="-dcc") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-dccConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
				cout << "-dcc Constructed." << endl;
				cout << "    |_ Val : (" +varVal+ ")" << endl;
				out_stream << "call dcc_" << varVal << ".bat" << endl;
				previousVal=varVal;
			}
			if (args[x][0]=="-c") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-cConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
				cout << "-c Constructed." << endl;
				cout << "    |_ Val : (" +varVal+ ")" << endl;
				out_stream << "Echo " << varVal << endl;
				previousVal=varVal;
			}
			if (args[x][0]=="-pas") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-pasConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
				cout << "-pas Constructed." << endl;
				cout << "    |_ Val : (" +varVal+ ")" << endl;
				out_stream << "set /p pause=" << varVal << endl;
				previousVal=varVal;
			}
			if (args[x][0]=="-^^") {
				cout << "-^^ Constructed." << endl;
				cout << "    |_ Val : (" +args[x][1]+ ")" << endl;
				out_stream << ":repeat" << repeat << endl;
				previousVal=args[x][1];
			}
			if (args[x][0]=="-^^^") {
				cout << "-^^^ Constructed." << endl;
				cout << "    |_ Val : (" +args[x][1]+ ")" << endl;
				out_stream << "goto repeat" << repeat << endl;
				previousVal=args[x][1];
			}
			if (args[x][0]=="-bat") {
				varVal="";
				blockArgsCnstr="";
				blockArgsCnstrNum=0;
				for(int u=0;u<args[x][1].length();u++) {
					if (args[x][1].at(u) == ':') {
						blockArgs[blockArgsCnstrNum]=blockArgsCnstr;
						blockArgsCnstrNum++;
						blockArgsCnstr="";
					}
					else
					{
						blockArgsCnstr+=args[x][1].at(u);
					}
				}
				for (int y=0;y<blockArgsCnstrNum;y++){
					cout << "-batConstruction ::argNum = " << y << " ::argTotalNum" << blockArgsCnstrNum << endl;
					cout << "                     |_ " << blockArgs[y] << endl;
					if (blockArgs[y].length() > 1) {
						if (blockArgs[y].at(0)=='<' && blockArgs[y].at(1)=='|') {
							string pipeGet="";
							for(int pipeRead=2;pipeRead<blockArgs[y].length();pipeRead++) {
								pipeGet+=blockArgs[y].at(pipeRead);
							}
							varVal+="%pipe" + pipeGet + "%";
						}
						else if (blockArgs[y]=="-v") {
							y++;
							varVal+=varibles[blockArgs[y]];
							y++;
						}
						else {
							varVal+=blockArgs[y];
						}
					}
				}
				cout << "-bat Constructed." << endl;
				cout << "    |_ Val : (" +varVal+ ")" << endl;
				out_stream << varVal <<  endl;
				previousVal=varVal;
			}
		} 
		out_stream.close();
		out_stream.open("CompiledMain.bat", ios::app);
	}
	for (int initArgs=0;initArgs<1000;initArgs++)
	{
		args[initArgs][0]="~~~";
		args[initArgs][1]="~~~";
	}
	return 0;
}

int main() {
	system("title BatchBlocks 3.0");
	out_stream.open("CompiledMain.bat");
	out_stream << "set homeDir=%CD%" << endl;
	cout << "Initalizing Arrays" << endl;
	for(int x=0;x < 1000;x++) {
		script[x]="~~~";
	}
	for(int x=0;x < 1000;x++) {
		for(int y=0;y < 2;y++) {
			args[x][y]="~~~";
		}
	}
	cout << "Initalization complete" << endl;
	in_stream.open("Main.txt");
	int z=0;
	string parse;
	in_stream >> parse;
	string lcom="";
	cout << "Offloading Code" << endl;
	cout << parse << endl;
	for (int x=0;x<parse.length();x++) {
		if (parse.at(x) != '~') {
			if (parse.at(x) == '_') {
				lcom+= " ";
			} else {
				lcom+=parse.at(x);
			}
		} else {
			script[z]=lcom;
			lcom="";
			z++;
		}
	}
	cout << "Offloading complete." << endl;
	cout << "Compiling..." << endl;
	int cmpX=0;
	int cmpZ=0;
	cmd="";
	while(script[cmpX] != "~~~") {
		cmpZ=0;
		while(script[cmpX].at(cmpZ) != ';' && cmpZ < script[cmpX].length()) {
			cout << cmpZ << " " << script[cmpX].length() << " " << script[cmpX] << endl;
			while(script[cmpX].at(cmpZ) == ' ')
			{
				cout << "stage0.moveToCmdField" << endl;
				cmpZ++;
			}
			while(script[cmpX].at(cmpZ) != ' ' && script[cmpX].at(cmpZ) != '{' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length())
			{
				cout << "stage1.getCommand" << endl;
				cout << "      |_" << cmd << endl;
				cmd+=script[cmpX].at(cmpZ);
				cmpZ++;
			}
			cout << cmd << endl;
			cout << "outCommand." << endl;
			while((script[cmpX].at(cmpZ) == ' ' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length()) || (script[cmpX].at(cmpZ) == '{' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length()))
			{
				cout << "stage2.moveToArgsField" << endl;
				cmpZ++;
			}
			while(script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length()) {
				cout << cmpZ << " " << script[cmpX].at(cmpZ) << endl;
				if (script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length()) {
					while((script[cmpX].at(cmpZ) == ' ' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length()) || (script[cmpX].at(cmpZ) == '{' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length()) || (script[cmpX].at(cmpZ) == ')' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length()))
					{
						cout << "stage2.moveToArgsField" << endl;
						cmpZ++;
					}
				}
				while(script[cmpX].at(cmpZ) != ' ' && script[cmpX].at(cmpZ) != '(' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length())
				{
					cout << "stage3.getArgs" << endl;
					lcom+=script[cmpX].at(cmpZ);
					cmpZ++;
				}
				cout << "argNum " << argNum << endl;
				cout << "New arg : " << lcom << endl;
				argNum++;
				args[argNum][0]=lcom;
				lcom="";
				while(script[cmpX].at(cmpZ) == ' ' && script[cmpX].at(cmpZ) == '(' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length())
				{
					cout << "stage4.moveToGetArgVal" << endl;
					cmpZ++;
				}
				if (script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length()) {
					cmpZ++;
				}
				while(script[cmpX].at(cmpZ) != ')' && script[cmpX].at(cmpZ) != ';' && cmpZ <= script[cmpX].length())
				{
					cout << "stage5.getArgVal" << endl;
					lcom+=script[cmpX].at(cmpZ);
					cmpZ++;
				}
				args[argNum][1]=lcom;
				lcom="";
			}
			cout << "--==-- cpl --==-- "<< endl;
			cout << "      [" << cmd << "]" << endl;
		}
	library();
	cmd="";
	cmpX++;
	}
	out_stream << "exit" << endl;
	out_stream.close();
	in_stream.close();
	system("start CompiledMain.bat");
	cout << "Compiling Finished." << endl;
	getline(cin, lcom);
	return 0;
}
